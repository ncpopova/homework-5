# https://dplyr.tidyverse.org/articles/dplyr.html - the basic
# https://dplyr.tidyverse.org/articles/grouping.html - group by in details
# https://dplyr.tidyverse.org/articles/base.html - comparing dplyr functions
# to the base R function.

# Update your quantmod library, or you might not be able to download the data.
# version should be 0.4.2.
# Here is a link to discussion of the problem with getting data from yahoo.
# https://github.com/joshuaulrich/quantmod/issues/358

library(tidyverse)
library(tidyquant)
library(lubridate)
library(dplyr)


#####Problem 1#####
# Write the following functions:
# 1.1. A function which replicates the SMA function. It should calculate the SMA
# for a vector to the left:
# 1.2. A function, which calculates the correlation coefficient between two vectors.
# It should replicate the cor function from the base package.

#1.1#
vector1 <- c(5,2,7,3,6,4)
TTR::SMA(m, n=2)
sma <-NULL
n <- 3
SMAFunction <- function(inputVector,n){
  for (i in n:base::length(inputVector)){
    sma <- c(sma, base::mean(inputVector[i:(i-n+1)]))
  }
  return(sma)
}

SMAFunction(vector1,n)

#1.2#
vector2 <- c(7,2,4,9,5,1)
cor <- stats::cor(vector2, vector1)

CorFunction <- function(inputVector1, inputVector2){
  First = inputVector1 - base::mean(inputVector1)
  Second = inputVector2 - base::mean(inputVector2)
  Nominator = base::sum(First*Second)/(base::length(inputVector1) - 1)
  Denominator = stats::sd(inputVector1)*stats::sd(inputVector2)
  Final = Nominator/Denominator
  return(Final)
}

CorFunction(vector2, vector1)

#####Problem 1#####

data <- c(0, 2, 4, 6, 7, 3, 2, 9, 17, 14, 15, 0, 4, 3)
for (i in 1:length(data)){
  d <- c(d, mean(data[i:(i+3)]))}
d <- ifelse(is.na(d), NA, sss)
# 1.2 cor
m <- c(41, 19, 23, 40, 55, 57, 33)
n <- c(94, 60, 74, 71, 82, 76, 61)
k <- (mean(sum(m-mean(m))*sum(n-mean(n))))/(sd(m)*sd(n))
l <- cor(m, n)

#####Problem 2#####
# Find all prime numbers less than 100, using for/while loops.

x = (1:100)
prime_numbers=c()
for (i in 2:100) {
  if (any(x == i)) {
    prime_numbers = c(prime_numbers, i)
    x = c(x[(x %% i) != 0], i)
  }
}
print(prime_numbers)

# One of the many I looked for in the Internet. I got the logic behind it.
#####Problem 2#####

#####Problem 3#####
# Read the wikipedia article and investopedia article on MACD:
# https://en.wikipedia.org/wiki/MACD
# https://www.investopedia.com/terms/m/macd.asp

# Download data for a stock of your choice and do the following:
# 1.Calculate the 26-period EMA(use the EMA function from tidyquant)
# 2.Calculate the 12-period EMA.
# 3.Calculate the MACD line(12-period EMA minus 26-period EMA)
# 4.Calculate the signal line - this is the 9-period EMA of the MACD.
# 5.Calculate the buy/sell signals. This means create a new column which tell
# us if we should buy or sell. When the MACD line crosses the signal line
# from above(MACD is above signal then MACD is below signal) this is a sell signal. 
# If it crosses from below (MACD is below signal then MACD is above signal) this is a buy signal.
# 6. Simulate how the strategy preforms and compare it to a benchmark strategy
# of just buying and holding the stock.
# In order to do this start with a portfolio of 100$ invested in the stock on the first day
# and see how it performs. Example:
# I start with 100$ and a stock which costs 100$ at the beginning of my time period.
# I get a buy signal when the stock price is 90. I buy the stock.
# I get a sell signal to sell the stock when the price is 110. I sell it and 
# and don't get any more signals.I end up with 100 * 110 / 90 = 122.22 
# The benchmark portfolio is I buy the stock at 100 at the beginning and at
# the end of the period the stock price is 120. I end up with 120.
# 122.22 > 120. so the MACD strategy was beating the market.
#####Problem 3#####

library(quantmod)
library(tidyquant)
library(tidyverse)

data <- tq_get("AAPL") %>%
  mutate(EMA26 = EMA(adjusted, n =26),
         EMA12 = EMA(adjusted, n =12),
         MACDline = EMA12 - EMA26,
         SignalLine = EMA(MACDline, n=9)) %>%
  filter(!is.na(EMA26 & SignalLine)) %>%
  mutate(signal = case_when(lag(MACDline) > lag(SignalLine) & MACDline < SignalLine ~ "sell",
                            lag(MACDline) < lag(SignalLine) & MACDline > SignalLine ~ "buy",
                            TRUE ~ "hold"))

data <- data %>%
  mutate(BenchmarkMoney = 100,
         sss = adjusted / lag(adjusted),
         sss = ifelse(is.na(sss), 1, sss),
         BenchmarkMoney1 = cumprod(sss),
         StrategyMoney = 100,
         sss1 = case_when(signal = "do not have stocks" ~ 1,
                          signal = "have stock" ~ sss,
                          TRUE ~ 999999999),
         StrategyMoney1 = cumprod(sss1))

options(scipen = 999)


#Upload your homeworks on your own github repo and send me an email, when you are done.
